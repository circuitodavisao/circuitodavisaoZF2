<?php

use Application\Controller\Helper\Constantes;
use Zend\Session\Container;

$versao = '?v=1.1.4';

echo $this
        ->headScript()
        ->prependFile($this->basePath() . '/vendor/plugins/pnotify/pnotify.js')
;
echo $this->inlineScript();

$mensagemPNotify = '';
$nomePessoa = '';
$sessao = new Container(Constantes::$NOME_APLICACAO);
$mostrarNotificacao = false;
if ($sessao->mostrarNotificacao) {
    $mostrarNotificacao = true;
    $mensagemPNotify = $this->translate(Constantes::$TRADUCAO_PESSOA_CADASTRADA);
    if ($sessao->exclusao) {
        $mensagemPNotify = $this->translate(Constantes::$TRADUCAO_PESSOA_INATIVADA_LANCAMENTO);
    }
    if ($sessao->emailEnviado) {
        $mensagemPNotify = 'Email(s) reenviado(s)';
    }
    if ($sessao->emailAlterado) {
        $mensagemPNotify = 'Email Alterado';
    }
    if ($sessao->nomePessoa) {
        $nomePessoa = $sessao->nomePessoa;
    }
    $sessao->jaMostreiANotificacao = true;
}
?>
<script type = "text/javascript">
<?php if ($mostrarNotificacao) { ?>
        window.onload = modalPNotify;
<?php } ?>

    function modalPNotify() {
        var stack_bar_bottom = {
            "dir1": "up",
            "dir2": "right",
            "spacing1": 0,
            "spacing2": 0
        }

        var noteStyle = 'success';
        var noteShadow = true;
        var noteOpacity = 1;
        new PNotify({
            title: '<?php echo $mensagemPNotify; ?>!',
            text: '<?php echo $nomePessoa; ?>',
            shadow: noteShadow,
            opacity: noteOpacity,
            addclass: 'stack_bar_bottom',
            type: noteStyle,
            stack: stack_bar_bottom,
            width: '70%',
            delay: 10000
        });
    }
    function mostrarModalClasse() {
        $.magnificPopup.open({
            removalDelay: 500, //delay removal by X to allow out-animation,
            items: {
                src: "#modalClassificacao"
            },
            modal: true,
            callbacks: {
                beforeOpen: function (e) {
                    var Animation = "mfp-zoomIn";
                    this.st.mainClass = Animation;
                }
            },
            midClick: true // allow opening popup on middle mouse click. Always set it to true if you don't provide alternative source.
        });
    }
    function mostrarModalCelulasNaoRealizadas() {
        $.magnificPopup.open({
            removalDelay: 500, //delay removal by X to allow out-animation,
            items: {
                src: "#modalCelulasNaoRealizadas"
            },
            modal: true,
            callbacks: {
                beforeOpen: function (e) {
                    var Animation = "mfp-zoomIn";
                    this.st.mainClass = Animation;
                }
            },
            midClick: true // allow opening popup on middle mouse click. Always set it to true if you don't provide alternative source.
        });
    }
    function mostrarModalInformativo(tipo) {
        var textoMetaCultoEDomingo = 'Meta 3 pessoas, você, seu co-líder e seu líder em treinamento, caso casado dobrado!';
        var textoMetaArena = 'Meta 6 pessoas, você, seu co-líder e seu líder em treinamento levando mais 1, caso casado dobrado!';
        var textoMetaMembresia = 'Meta Eu + 6, caso casado dobrado!';
        var spanModalInformativo = $('#spanModalInformativo');
        var texto = '';
        switch (tipo) {
            case 1:
                texto = textoMetaCultoEDomingo;
                break;
            case 2:
                texto = textoMetaArena;
                break;
            case 3:
                texto = textoMetaMembresia;
                break;
        }
        spanModalInformativo.text(texto);
        $.magnificPopup.open({
            removalDelay: 500, //delay removal by X to allow out-animation,
            items: {
                src: "#modalInformativo"
            },
            modal: true,
            callbacks: {
                beforeOpen: function (e) {
                    var Animation = "mfp-zoomIn";
                    this.st.mainClass = Animation;
                }
            },
            midClick: true // allow opening popup on middle mouse click. Always set it to true if you don't provide alternative source.
        });
    }
    var opts = {
        angle: -0.25,
        lineWidth: 0.2,
        radiusScale: 0.9,
        pointer: {
            length: 0.6,
            strokeWidth: 0.05,
            color: '#000000'
        },
        limitMax: false,
        limitMin: false,
        highDpiSupport: true
    };
    function valorAcimaDaMeta(meta) {
        meta = parseInt(meta);
        var resposta = 0;
        if (meta === 3) {
            resposta = 4;
        }
        if (meta === 6) {
            resposta = 8;
        }
        if (meta === 7) {
            resposta = 9;
        }
        if (meta === 12) {
            resposta = 16;
        }
        if (meta === 14) {
            resposta = 18.5;
        }
        return resposta;
    }
    function ajustaOpcoesGaugePorValor(opts, meta, valorAlcancado) {
        meta = parseInt(meta);
        valorAlcancado = parseFloat(valorAlcancado);
        var valoresLabels;
        var coresZones;
        var corVermelha = '#E63F24';
        var corAmarela = '#F5B025';
        var corVerde = '#5BC24C';
        var corAzul = '#27A2CF';
        if (meta === 3) {
            valoresLabels = [1, 2, 3, 4];
        }
        if (meta === 6) {
            valoresLabels = [2, 4, 6, 8];
        }
        if (meta === 7) {
            valoresLabels = [2.4, 4.8, 7, 9.4];
        }
        if (meta === 12) {
            valoresLabels = [4, 8, 12, 16];
        }
        if (meta === 14) {
            valoresLabels = [5, 9, 14, 19];
        }
        if (valorAlcancado > valoresLabels[3]) {
            valoresLabels[3] = parseInt(valorAlcancado);
        }
        coresZones = [
            {strokeStyle: corVermelha, min: 0, max: valoresLabels[0]},
            {strokeStyle: corAmarela, min: valoresLabels[0], max: valoresLabels[1]},
            {strokeStyle: corVerde, min: valoresLabels[1], max: valoresLabels[2]},
            {strokeStyle: corAzul, min: valoresLabels[2], max: valoresLabels[3]}
        ]

        opts['staticLabels'] = {
            font: "10px sans-serif",
            labels: valoresLabels,
            fractionDigits: 0
        };
        opts['staticZones'] = coresZones;
        return opts;
    }
    var rodarApenasUmaVezOsGaugesMembresia = 1;
    var rodarApenasUmaVezOsGaugesCelula = 1;
    var tipoMembresia = 1;
    var tipoCelula = 2;
    var valorMaximoBarra = 11;
    function criarGauges(tipo, idRelatorio) {
        if (idRelatorio == 2) {
            elementos = document.getElementsByClassName('removerEquipe');
            var i;
            for (i = 0; i < elementos.length; i++) {
                elementos[i].style.display = 'none';
            }
        }
        var valoresGraficos = [3, 6, 3, 7];
        var eCasal = document.getElementById('eCasal').value;
        if (parseInt(eCasal) === 1) {
            valoresGraficos = [6, 12, 6, 14];
        }
        var valorMax = 0;
        if (tipo === tipoMembresia && rodarApenasUmaVezOsGaugesMembresia === 1) {
            /* Culto */
            var valorCulto = $('#valorCulto').val()
            valorMax = valorAcimaDaMeta(valoresGraficos[0]);
            if (valorCulto > valorMax) {
                valorMax = valorCulto;
            }
            var target = document.getElementById('gaugeCulto'); // your canvas element
            if (idRelatorio == 1) {
                opts = ajustaOpcoesGaugePorValor(opts, valoresGraficos[0], valorCulto);
                var gauge = new Gauge(target).setOptions(opts); // create sexy gauge!
                gauge.maxValue = valorMax; // set max gauge value
                gauge.setMinValue(0); // Prefer setter over gauge.minValue = 0
                gauge.animationSpeed = 128; // set animation speed (32 is default value)
                gauge.set(valorCulto); // set actual value
                gauge.width = '250px';
            }
            if (idRelatorio == 2) {
                target.style.display = 'none';
            }
            $('#labelValorCulto').html(valorCulto);
            $('#spanMetaCulto').html(valoresGraficos[0]);
            /* Arena */
            var valorArena = $('#valorArena').val();
            valorMax = valorAcimaDaMeta(valoresGraficos[1]);
            if (valorArena > valorMax) {
                valorMax = valorCulto;
            }
            var target = document.getElementById('gaugeArena'); // your canvas element
            if (idRelatorio == 1) {
                opts = ajustaOpcoesGaugePorValor(opts, valoresGraficos[1], valorArena);
                var gauge = new Gauge(target).setOptions(opts); // create sexy gauge!
                gauge.maxValue = valorMax; // set max gauge value
                gauge.setMinValue(0); // Prefer setter over gauge.minValue = 0
                gauge.animationSpeed = 128; // set animation speed (32 is default value)
                gauge.set(valorArena); // set actual value
            }
            if (idRelatorio == 2) {
                target.style.display = 'none';
            }
            $('#labelValorArena').html(valorArena);
            $('#spanMetaArena').html(valoresGraficos[1]);
            /* Domingo */
            var valorDomingo = $('#valorDomingo').val();
            valorMax = valorAcimaDaMeta(valoresGraficos[2]);
            if (valorDomingo > valorMax) {
                valorMax = valorDomingo;
            }
            var target = document.getElementById('gaugeDomingo'); // your canvas element
            if (idRelatorio == 1) {
                opts = ajustaOpcoesGaugePorValor(opts, valoresGraficos[2], valorDomingo);
                var gauge = new Gauge(target).setOptions(opts); // create sexy gauge!
                gauge.maxValue = valorMax; // set max gauge value
                gauge.setMinValue(0); // Prefer setter over gauge.minValue = 0
                gauge.animationSpeed = 128; // set animation speed (32 is default value)
                gauge.set(valorDomingo); // set actual value
            }
            if (idRelatorio == 2) {
                target.style.display = 'none';
            }
            $('#labelValorDomingo').html(valorDomingo);
            $('#spanMetaDomingo').html(valoresGraficos[2]);
            /* Membresia */
            var valorMembresia = $('#valorMembresia').val();
            valorMax = valorAcimaDaMeta(valoresGraficos[3]);
            if (valorMembresia > valorMax) {
                valorMax = valorMembresia;
            }
            var target = document.getElementById('gaugeMembresia'); // your canvas element
            if (idRelatorio == 1) {
                opts = ajustaOpcoesGaugePorValor(opts, valoresGraficos[3], valorMembresia);
                var gauge = new Gauge(target).setOptions(opts); // create sexy gauge!
                gauge.maxValue = valorMax; // set max gauge value
                gauge.setMinValue(0); // Prefer setter over gauge.minValue = 0
                gauge.animationSpeed = 128; // set animation speed (32 is default value)
                gauge.set(valorMembresia); // set actual value
            }
            if (idRelatorio == 2) {
                target.style.display = 'none';
            }
            $('#labelValorMembresia').html(valorMembresia);
            $('#spanMetaMembresia').html(valoresGraficos[3]);
            rodarApenasUmaVezOsGaugesMembresia += 1;

            valorMaximoBarra = 11;
            var totalFatoRankingMembresia = document.getElementById('totalFatoRankingMembresia');
            if (totalFatoRankingMembresia) {
                montarMeuHighChart(tipoRelatorioMembresia, totalFatoRankingMembresia);
            }
        }

        if (tipo === tipoCelula && rodarApenasUmaVezOsGaugesCelula === 1) {
//            var valorCelula = $('#valorCelula').val()
//            valorMax = valorAcimaDaMeta(valoresGraficos[3]);
//            if (valorCelula > valorMax) {
//                valorMax = valorCelula;
//            }
//            var target = document.getElementById('gaugeCelula'); // your canvas element
//            opts = ajustaOpcoesGaugePorValor(opts, valoresGraficos[3], valorCelula);
//            var gauge = new Gauge(target).setOptions(opts); // create sexy gauge!
//            gauge.maxValue = valorMax; // set max gauge value
//            gauge.setMinValue(0); // Prefer setter over gauge.minValue = 0
//            gauge.animationSpeed = 128; // set animation speed (32 is default value)
//            gauge.set(valorCelula); // set actual value
//            gauge.width = '250px';
//            $('#labelValorCelula').html(valorCelula);
//            $('#spanMetaCelula').html(valoresGraficos[3]);
//            rodarApenasUmaVezOsGaugesCelula += 1;

            valorMaximoBarra = 11;
            var totalFatoRankingCelula = document.getElementById('totalFatoRankingCelula');
            if (totalFatoRankingCelula) {
                montarMeuHighChart(tipoRelatorioCelula, totalFatoRankingCelula);
            }
        }
    }

    var highColors = ['#E63F24', '#27A2CF', '#5BC24C'];

    var Barchart = function (options) {
        this.options = options;
        this.canvas = options.canvas;
        this.ctx = this.canvas.getContext("2d");
        this.colors = options.colors;

        this.draw = function () {
            var maxValue = 0;
            for (var categ in this.options.data) {
                maxValue = Math.max(maxValue, this.options.data[categ]);
            }
            var canvasActualHeight = this.canvas.height - this.options.padding * 2;
            var canvasActualWidth = this.canvas.width - this.options.padding * 2;

            //drawing the grid lines
            var gridValue = 0;
            while (gridValue <= maxValue) {
                var gridY = canvasActualHeight * (1 - gridValue / maxValue) + this.options.padding;
                drawLine(
                        this.ctx,
                        0,
                        gridY,
                        this.canvas.width,
                        gridY,
                        this.options.gridColor
                        );

                //writing grid markers
                this.ctx.save();
                this.ctx.fillStyle = this.options.gridColor;
                this.ctx.font = "bold 10px Arial";
                this.ctx.fillText(gridValue, 10, gridY - 2);
                this.ctx.restore();

                gridValue += this.options.gridScale;
            }

            //drawing the bars
            var barIndex = 0;
            var numberOfBars = Object.keys(this.options.data).length;
            var barSize = (canvasActualWidth) / numberOfBars;

            for (categ in this.options.data) {
                var val = this.options.data[categ];
                var barHeight = Math.round(canvasActualHeight * val / maxValue);
                drawBar(
                        this.ctx,
                        this.options.padding + barIndex * barSize,
                        this.canvas.height - barHeight - this.options.padding,
                        barSize,
                        barHeight,
                        this.colors[barIndex % this.colors.length]
                        );

                barIndex++;
            }

        }
    }
    function drawLine(ctx, startX, startY, endX, endY, color) {
        ctx.save();
        ctx.strokeStyle = color;
        ctx.beginPath();
        ctx.moveTo(startX, startY);
        ctx.lineTo(endX, endY);
        ctx.stroke();
        ctx.restore();
    }
    function drawBar(ctx, upperLeftCornerX, upperLeftCornerY, width, height, color) {
        ctx.save();
        ctx.fillStyle = color;
        ctx.fillRect(upperLeftCornerX, upperLeftCornerY, width, height);
        ctx.restore();
    }

    var tipoRelatorioMembresia = 1;
    var tipoRelatorioCelula = 2;

    function montarMeuHighChart(tipo, total) {
        var nomeRelatorio = '';
        if (tipo === tipoRelatorioMembresia) {
            nomeRelatorio = 'Membresia';
        }
        if (tipo === tipoRelatorioCelula) {
            nomeRelatorio = 'Celula';
        }
        total = parseInt(total.value);
        for (var i = 0; i < total; i++) {
            var stringElementoValor = 'valorRanking' + nomeRelatorio + i;
            var elementoComValor = document.getElementById(stringElementoValor);
            valorBarra = elementoComValor.value;
            if (valorBarra > valorMaximoBarra) {
                valorMaximoBarra = valorBarra;
            }
        }
        for (var i = 0; i < total; i++) {
            var stringElementoValor = 'valorRanking' + nomeRelatorio + i;
            var elementoComValor = $('#' + stringElementoValor);
            valorBarra = elementoComValor.val();
            if (valorBarra === 0) {
                valorBarra = 1;
            }
            valorBarra = parseFloat(valorBarra);
            var idElemento = "div" + nomeRelatorio + i;
            var elemento = $('#' + idElemento);

            elemento.highcharts({
                credits: false,
                colors: [bgSuccess],
                chart: {
                    backgroundColor: 'transparent',
                    type: 'column',
                },
                legend: {
                    enabled: false
                },
                title: {
                    text: null,
                },
                xAxis: {
                    lineWidth: 0,
                    tickLength: 6,
                    title: {
                        text: null
                    },
                    labels: {
                        enabled: false
                    }
                },
                yAxis: {
                    max: valorMaximoBarra,
                    lineWidth: 0,
                    gridLineWidth: 0,
                    lineColor: '#EEE',
                    gridLineColor: '#EEE',
                    title: {
                        text: null
                    },
                    labels: {
                        enabled: false,
                        style: {
                            fontWeight: '400'
                        }
                    }
                },
                plotOptions: {
                    column: {
                        colorByPoint: true,
                    }
                },
                tooltip: {
                    enabled: false,
                },
                series: [{
                        name: nomeRelatorio,
                        data: [valorBarra]
                    }]
            });
        }
    }

    function pegarCelulasNaoRealizadasPorPeriodo(periodo, idGrupo) {

        $.post(
                "/relatorioPegarCelulasNaoRealizadasPorPeriodo",
                {
                    periodo: periodo,
                    idGrupo: idGrupo,
                },
                function (data) {
                    if (data.response) {

                    }
                }, 'json');
    }
</script>